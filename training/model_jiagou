/home/ww/anaconda3/envs/fcfgan/bin/python /media/ww/软件/FcF-Inpainting/train.py --outdir=training-runs-inp --img_data=/media/ww/软件/FcF-Inpainting/datasets/Chinese/train --gpus 1 --kimg 1000 --gamma 10 --aug noaug --metrics True --eval_img_data /media/ww/E5512C373F55065F/datasets/Chinese/evaluation/random_segm_256 --batch 8

Training options:
{
  "num_gpus": 1,
  "eval_img_data": "/media/ww/E5512C373F55065F/datasets/Chinese/evaluation/random_segm_256",
  "resolution": null,
  "image_snapshot_ticks": 50,
  "network_snapshot_ticks": 50,
  "metrics": true,
  "random_seed": 0,
  "training_set_kwargs": {
    "class_name": "training.data.dataset.ImageDataset",
    "img_path": "/media/ww/\u8f6f\u4ef6/FcF-Inpainting/datasets/Chinese/train",
    "use_labels": false,
    "max_size": 84022,
    "xflip": false,
    "resolution": 256
  },
  "data_loader_kwargs": {
    "pin_memory": true,
    "num_workers": 3,
    "prefetch_factor": 2
  },
  "G_kwargs": {
    "class_name": "training.networks.Generator",
    "z_dim": 512,
    "w_dim": 512,
    "encoder_kwargs": {
      "block_kwargs": {},
      "mapping_kwargs": {},
      "epilogue_kwargs": {
        "mbstd_group_size": 4
      },
      "channel_base": 16384,
      "channel_max": 512,
      "num_fp16_res": 4,
      "conv_clamp": 256
    },
    "mapping_kwargs": {
      "num_layers": 2
    },
    "synthesis_kwargs": {
      "channel_base": 16384,
      "channel_max": 512,
      "num_fp16_res": 4,
      "conv_clamp": 256
    }
  },
  "D_kwargs": {
    "class_name": "training.networks.Discriminator",
    "block_kwargs": {},
    "mapping_kwargs": {},
    "epilogue_kwargs": {
      "mbstd_group_size": 4
    },
    "channel_base": 16384,
    "channel_max": 512,
    "num_fp16_res": 4,
    "conv_clamp": 256
  },
  "G_opt_kwargs": {
    "class_name": "torch.optim.Adam",
    "lr": 0.001,
    "betas": [
      0,
      0.99
    ],
    "eps": 1e-08
  },
  "D_opt_kwargs": {
    "class_name": "torch.optim.Adam",
    "lr": 0.001,
    "betas": [
      0,
      0.99
    ],
    "eps": 1e-08
  },
  "loss_kwargs": {
    "class_name": "training.losses.loss.StyleGAN2Loss",
    "r1_gamma": 10.0
  },
  "total_kimg": 1000,
  "batch_size": 8,
  "batch_gpu": 8,
  "ema_kimg": 5.0,
  "ema_rampup": 0.05,
  "run_dir": "training-runs-inp/train-auto1-gamma10-kimg1000-batch8-noaug"
}

Output directory:   training-runs-inp/train-auto1-gamma10-kimg1000-batch8-noaug
Training data:      /media/ww/软件/FcF-Inpainting/datasets/Chinese/train
Training duration:  1000 kimg
Number of GPUs:     1
Number of images:   84022
Image resolution:   256
Dataset x-flips:    False

Creating output directory...
Launching processes...
Loading training set...

Num images:  84022
Image shape: [3, 256, 256]
Label shape: [0]

Constructing networks...
Generator Params: 70.339954 M
Discriminator Params: 24.001153 M
Setting up augmentation...
Distributing across 1 GPUs...
G_encoder +++++++++++++++++++++++++
EncoderNetwork(
  (b256): EncoderBloc k(
    (fromrgb): Conv2dLayer()
    (conv0): Conv2dLayer()
    (conv1): Conv2dLayer()
  )
  (b128): EncoderBlock(
    (conv0): Conv2dLayer()
    (conv1): Conv2dLayer()
  )
  (b64): EncoderBlock(
    (conv0): Conv2dLayer()
    (conv1): Conv2dLayer()
  )
  (b32): EncoderBlock(
    (conv0): Conv2dLayer()
    (conv1): Conv2dLayer()
  )
  (b16): EncoderBlock(
    (conv0): Conv2dLayer()
    (conv1): Conv2dLayer()
  )
  (b8): EncoderBlock(
    (conv0): Conv2dLayer()
    (conv1): Conv2dLayer()
  )
  (b4): EncoderEpilogue(          #当输入图像的分辨率被逐步缩小后，在最低分辨率的阶段（这里是 4x4 分辨率），将最终的特征图输入到 EncoderEpilogue 中
    (mbstd): MinibatchStdLayer()
    (conv): Conv2dLayer()
    (fc): FullyConnectedLayer()
    (dropout): Dropout(p=0.5, inplace=False)
  )
)



G_mapping +++++++++++++++++++++++++
MappingNetwork(
  (fc0): FullyConnectedLayer()
  (fc1): FullyConnectedLayer()
)



G_synthesis +++++++++++++++++++++++++
SynthesisNetwork(
  (foreword): SynthesisForeword(
    (fc): FullyConnectedLayer()
    (conv): SynthesisLayer(
      (affine): FullyConnectedLayer()
    )
    (torgb): ToRGBLayer(
      (affine): FullyConnectedLayer()
    )
  )
  (b8): SynthesisBlock(
    (ffc_skip): ModuleList()
    (conv0): SynthesisLayer(
      (affine): FullyConnectedLayer()
    )
    (conv1): SynthesisLayer(
      (affine): FullyConnectedLayer()
    )
    (torgb): ToRGBLayer(
      (affine): FullyConnectedLayer()
    )
  )
  (b16): SynthesisBlock(
    (ffc_skip): ModuleList()
    (conv0): SynthesisLayer(
      (affine): FullyConnectedLayer()
    )
    (conv1): SynthesisLayer(
      (affine): FullyConnectedLayer()
    )
    (torgb): ToRGBLayer(
      (affine): FullyConnectedLayer()
    )
  )
  (b32): SynthesisBlock(
    (ffc_skip): ModuleList(
      (0): FFCSkipLayer(            #用于融合局部特征（local features）和全局特征（global features）
        (ffc_act): FFCBlock(
          (ffc_block): FFCResnetBlock(
            (conv1): FFC_BN_ACT(
              (ffc): FFC(
                (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)        #用于处理局部的空间特征
                (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)        #用于提取全局特征
                (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)        #使用了**频域变换（傅里叶变换）**来捕捉全局上下文信息
                (convg2g): SpectralTransform(
                  (downsample): Identity()
                  (conv1): Sequential(
                    (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                  )
                  (fu): FourierUnit(
                    (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (relu): ReLU()
                  )
                  (lfu): FourierUnit(
                    (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (relu): ReLU()
                  )
                  (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                )
                (gate): Conv2d(512, 2, kernel_size=(1, 1), stride=(1, 1))
              )
              (act_l): ReLU(inplace=True)
              (act_g): ReLU(inplace=True)
            )
            (conv2): FFC_BN_ACT(
              (ffc): FFC(
                (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convg2g): SpectralTransform(
                  (downsample): Identity()
                  (conv1): Sequential(
                    (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                  )
                  (fu): FourierUnit(
                    (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (relu): ReLU()
                  )
                  (lfu): FourierUnit(
                    (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (relu): ReLU()
                  )
                  (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                )
                (gate): Conv2d(512, 2, kernel_size=(1, 1), stride=(1, 1))
              )
              (act_l): ReLU(inplace=True)
              (act_g): ReLU(inplace=True)
            )
          )
          (concat_layer): ConcatTupleLayer()
        )
      )
    )
    (conv0): SynthesisLayer(
      (affine): FullyConnectedLayer()
    )
    (conv1): SynthesisLayer(
      (affine): FullyConnectedLayer()
    )
    (torgb): ToRGBLayer(
      (affine): FullyConnectedLayer()
    )
  )
  (b64): SynthesisBlock(
    (ffc_skip): ModuleList(
      (0): FFCSkipLayer(
        (ffc_act): FFCBlock(
          (ffc_block): FFCResnetBlock(
            (conv1): FFC_BN_ACT(
              (ffc): FFC(
                (convl2l): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convl2g): Conv2d(64, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convg2l): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convg2g): SpectralTransform(
                  (downsample): Identity()
                  (conv1): Sequential(
                    (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                  )
                  (fu): FourierUnit(
                    (conv_layer): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (relu): ReLU()
                  )
                  (lfu): FourierUnit(
                    (conv_layer): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (relu): ReLU()
                  )
                  (conv2): Conv2d(96, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
                )
                (gate): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
              )
              (act_l): ReLU(inplace=True)
              (act_g): ReLU(inplace=True)
            )
            (conv2): FFC_BN_ACT(
              (ffc): FFC(
                (convl2l): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convl2g): Conv2d(64, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convg2l): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convg2g): SpectralTransform(
                  (downsample): Identity()
                  (conv1): Sequential(
                    (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                  )
                  (fu): FourierUnit(
                    (conv_layer): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (relu): ReLU()
                  )
                  (lfu): FourierUnit(
                    (conv_layer): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (relu): ReLU()
                  )
                  (conv2): Conv2d(96, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
                )
                (gate): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
              )
              (act_l): ReLU(inplace=True)
              (act_g): ReLU(inplace=True)
            )
          )
          (concat_layer): ConcatTupleLayer()
        )
      )
    )
    (conv0): SynthesisLayer(
      (affine): FullyConnectedLayer()
    )
    (conv1): SynthesisLayer(
      (affine): FullyConnectedLayer()
    )
    (torgb): ToRGBLayer(
      (affine): FullyConnectedLayer()
    )
  )
  (b128): SynthesisBlock(
    (ffc_skip): ModuleList(
      (0): FFCSkipLayer(
        (ffc_act): FFCBlock(
          (ffc_block): FFCResnetBlock(
            (conv1): FFC_BN_ACT(
              (ffc): FFC(
                (convl2l): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convl2g): Conv2d(32, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convg2l): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convg2g): SpectralTransform(
                  (downsample): Identity()
                  (conv1): Sequential(
                    (0): Conv2d(96, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                  )
                  (fu): FourierUnit(
                    (conv_layer): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (relu): ReLU()
                  )
                  (lfu): FourierUnit(
                    (conv_layer): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (relu): ReLU()
                  )
                  (conv2): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
                )
                (gate): Conv2d(128, 2, kernel_size=(1, 1), stride=(1, 1))
              )
              (act_l): ReLU(inplace=True)
              (act_g): ReLU(inplace=True)
            )
            (conv2): FFC_BN_ACT(
              (ffc): FFC(
                (convl2l): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convl2g): Conv2d(32, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convg2l): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convg2g): SpectralTransform(
                  (downsample): Identity()
                  (conv1): Sequential(
                    (0): Conv2d(96, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                  )
                  (fu): FourierUnit(
                    (conv_layer): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (relu): ReLU()
                  )
                  (lfu): FourierUnit(
                    (conv_layer): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (relu): ReLU()
                  )
                  (conv2): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
                )
                (gate): Conv2d(128, 2, kernel_size=(1, 1), stride=(1, 1))
              )
              (act_l): ReLU(inplace=True)
              (act_g): ReLU(inplace=True)
            )
          )
          (concat_layer): ConcatTupleLayer()
        )
      )
    )
    (conv0): SynthesisLayer(
      (affine): FullyConnectedLayer()
    )
    (conv1): SynthesisLayer(
      (affine): FullyConnectedLayer()
    )
    (torgb): ToRGBLayer(
      (affine): FullyConnectedLayer()
    )
  )
  (b256): SynthesisBlock(
    (ffc_skip): ModuleList(
      (0): FFCSkipLayer(
        (ffc_act): FFCBlock(
          (ffc_block): FFCResnetBlock(
            (conv1): FFC_BN_ACT(
              (ffc): FFC(
                (convl2l): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convl2g): Conv2d(16, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convg2l): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convg2g): SpectralTransform(
                  (downsample): Identity()
                  (conv1): Sequential(
                    (0): Conv2d(48, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                  )
                  (fu): FourierUnit(
                    (conv_layer): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (relu): ReLU()
                  )
                  (lfu): FourierUnit(
                    (conv_layer): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (relu): ReLU()
                  )
                  (conv2): Conv2d(24, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
                )
                (gate): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))
              )
              (act_l): ReLU(inplace=True)
              (act_g): ReLU(inplace=True)
            )
            (conv2): FFC_BN_ACT(
              (ffc): FFC(
                (convl2l): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convl2g): Conv2d(16, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convg2l): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                (convg2g): SpectralTransform(
                  (downsample): Identity()
                  (conv1): Sequential(
                    (0): Conv2d(48, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                  )
                  (fu): FourierUnit(
                    (conv_layer): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (relu): ReLU()
                  )
                  (lfu): FourierUnit(
                    (conv_layer): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (relu): ReLU()
                  )
                  (conv2): Conv2d(24, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
                )
                (gate): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))
              )
              (act_l): ReLU(inplace=True)
              (act_g): ReLU(inplace=True)
            )
          )
          (concat_layer): ConcatTupleLayer()
        )
      )
    )
    (conv0): SynthesisLayer(
      (affine): FullyConnectedLayer()
    )
    (conv1): SynthesisLayer(
      (affine): FullyConnectedLayer()
    )
    (torgb): ToRGBLayer(
      (affine): FullyConnectedLayer()
    )
  )
)



D +++++++++++++++++++++++++
Discriminator(
  (b256): DiscriminatorBlock(
    (fromrgb): Conv2dLayer()
    (conv0): Conv2dLayer()
    (conv1): Conv2dLayer()
    (skip): Conv2dLayer()
  )
  (b128): DiscriminatorBlock(
    (conv0): Conv2dLayer()
    (conv1): Conv2dLayer()
    (skip): Conv2dLayer()
  )
  (b64): DiscriminatorBlock(
    (conv0): Conv2dLayer()
    (conv1): Conv2dLayer()
    (skip): Conv2dLayer()
  )
  (b32): DiscriminatorBlock(
    (conv0): Conv2dLayer()
    (conv1): Conv2dLayer()
    (skip): Conv2dLayer()
  )
  (b16): DiscriminatorBlock(
    (conv0): Conv2dLayer()
    (conv1): Conv2dLayer()
    (skip): Conv2dLayer()
  )
  (b8): DiscriminatorBlock(
    (conv0): Conv2dLayer()
    (conv1): Conv2dLayer()
    (skip): Conv2dLayer()
  )
  (b4): DiscriminatorEpilogue(
    (mbstd): MinibatchStdLayer()
    (conv): Conv2dLayer()
    (fc): FullyConnectedLayer()
    (out): FullyConnectedLayer()
  )
)



None +++++++++++++++++++++++++
Generator(
  (encoder): EncoderNetwork(
    (b256): EncoderBlock(
      (fromrgb): Conv2dLayer()
      (conv0): Conv2dLayer()
      (conv1): Conv2dLayer()
    )
    (b128): EncoderBlock(
      (conv0): Conv2dLayer()
      (conv1): Conv2dLayer()
    )
    (b64): EncoderBlock(
      (conv0): Conv2dLayer()
      (conv1): Conv2dLayer()
    )
    (b32): EncoderBlock(
      (conv0): Conv2dLayer()
      (conv1): Conv2dLayer()
    )
    (b16): EncoderBlock(
      (conv0): Conv2dLayer()
      (conv1): Conv2dLayer()
    )
    (b8): EncoderBlock(
      (conv0): Conv2dLayer()
      (conv1): Conv2dLayer()
    )
    (b4): EncoderEpilogue(
      (mbstd): MinibatchStdLayer()
      (conv): Conv2dLayer()
      (fc): FullyConnectedLayer()
      (dropout): Dropout(p=0.5, inplace=False)
    )
  )
  (synthesis): SynthesisNetwork(
    (foreword): SynthesisForeword(
      (fc): FullyConnectedLayer()
      (conv): SynthesisLayer(
        (affine): FullyConnectedLayer()
      )
      (torgb): ToRGBLayer(
        (affine): FullyConnectedLayer()
      )
    )
    (b8): SynthesisBlock(
      (ffc_skip): ModuleList()
      (conv0): SynthesisLayer(
        (affine): FullyConnectedLayer()
      )
      (conv1): SynthesisLayer(
        (affine): FullyConnectedLayer()
      )
      (torgb): ToRGBLayer(
        (affine): FullyConnectedLayer()
      )
    )
    (b16): SynthesisBlock(
      (ffc_skip): ModuleList()
      (conv0): SynthesisLayer(
        (affine): FullyConnectedLayer()
      )
      (conv1): SynthesisLayer(
        (affine): FullyConnectedLayer()
      )
      (torgb): ToRGBLayer(
        (affine): FullyConnectedLayer()
      )
    )
    (b32): SynthesisBlock(
      (ffc_skip): ModuleList(
        (0): FFCSkipLayer(
          (ffc_act): FFCBlock(
            (ffc_block): FFCResnetBlock(
              (conv1): FFC_BN_ACT(
                (ffc): FFC(
                  (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convg2g): SpectralTransform(
                    (downsample): Identity()
                    (conv1): Sequential(
                      (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (1): ReLU(inplace=True)
                    )
                    (fu): FourierUnit(
                      (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (relu): ReLU()
                    )
                    (lfu): FourierUnit(
                      (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (relu): ReLU()
                    )
                    (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (gate): Conv2d(512, 2, kernel_size=(1, 1), stride=(1, 1))
                )
                (act_l): ReLU(inplace=True)
                (act_g): ReLU(inplace=True)
              )
              (conv2): FFC_BN_ACT(
                (ffc): FFC(
                  (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convg2g): SpectralTransform(
                    (downsample): Identity()
                    (conv1): Sequential(
                      (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (1): ReLU(inplace=True)
                    )
                    (fu): FourierUnit(
                      (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (relu): ReLU()
                    )
                    (lfu): FourierUnit(
                      (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (relu): ReLU()
                    )
                    (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (gate): Conv2d(512, 2, kernel_size=(1, 1), stride=(1, 1))
                )
                (act_l): ReLU(inplace=True)
                (act_g): ReLU(inplace=True)
              )
            )
            (concat_layer): ConcatTupleLayer()
          )
        )
      )
      (conv0): SynthesisLayer(
        (affine): FullyConnectedLayer()
      )
      (conv1): SynthesisLayer(
        (affine): FullyConnectedLayer()
      )
      (torgb): ToRGBLayer(
        (affine): FullyConnectedLayer()
      )
    )
    (b64): SynthesisBlock(
      (ffc_skip): ModuleList(
        (0): FFCSkipLayer(
          (ffc_act): FFCBlock(
            (ffc_block): FFCResnetBlock(
              (conv1): FFC_BN_ACT(
                (ffc): FFC(
                  (convl2l): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convl2g): Conv2d(64, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convg2l): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convg2g): SpectralTransform(
                    (downsample): Identity()
                    (conv1): Sequential(
                      (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (1): ReLU(inplace=True)
                    )
                    (fu): FourierUnit(
                      (conv_layer): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (relu): ReLU()
                    )
                    (lfu): FourierUnit(
                      (conv_layer): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (relu): ReLU()
                    )
                    (conv2): Conv2d(96, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (gate): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
                )
                (act_l): ReLU(inplace=True)
                (act_g): ReLU(inplace=True)
              )
              (conv2): FFC_BN_ACT(
                (ffc): FFC(
                  (convl2l): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convl2g): Conv2d(64, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convg2l): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convg2g): SpectralTransform(
                    (downsample): Identity()
                    (conv1): Sequential(
                      (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (1): ReLU(inplace=True)
                    )
                    (fu): FourierUnit(
                      (conv_layer): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (relu): ReLU()
                    )
                    (lfu): FourierUnit(
                      (conv_layer): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (relu): ReLU()
                    )
                    (conv2): Conv2d(96, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (gate): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
                )
                (act_l): ReLU(inplace=True)
                (act_g): ReLU(inplace=True)
              )
            )
            (concat_layer): ConcatTupleLayer()
          )
        )
      )
      (conv0): SynthesisLayer(
        (affine): FullyConnectedLayer()
      )
      (conv1): SynthesisLayer(
        (affine): FullyConnectedLayer()
      )
      (torgb): ToRGBLayer(
        (affine): FullyConnectedLayer()
      )
    )
    (b128): SynthesisBlock(
      (ffc_skip): ModuleList(
        (0): FFCSkipLayer(
          (ffc_act): FFCBlock(
            (ffc_block): FFCResnetBlock(
              (conv1): FFC_BN_ACT(
                (ffc): FFC(
                  (convl2l): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convl2g): Conv2d(32, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convg2l): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convg2g): SpectralTransform(
                    (downsample): Identity()
                    (conv1): Sequential(
                      (0): Conv2d(96, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (1): ReLU(inplace=True)
                    )
                    (fu): FourierUnit(
                      (conv_layer): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (relu): ReLU()
                    )
                    (lfu): FourierUnit(
                      (conv_layer): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (relu): ReLU()
                    )
                    (conv2): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (gate): Conv2d(128, 2, kernel_size=(1, 1), stride=(1, 1))
                )
                (act_l): ReLU(inplace=True)
                (act_g): ReLU(inplace=True)
              )
              (conv2): FFC_BN_ACT(
                (ffc): FFC(
                  (convl2l): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convl2g): Conv2d(32, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convg2l): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convg2g): SpectralTransform(
                    (downsample): Identity()
                    (conv1): Sequential(
                      (0): Conv2d(96, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (1): ReLU(inplace=True)
                    )
                    (fu): FourierUnit(
                      (conv_layer): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (relu): ReLU()
                    )
                    (lfu): FourierUnit(
                      (conv_layer): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (relu): ReLU()
                    )
                    (conv2): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (gate): Conv2d(128, 2, kernel_size=(1, 1), stride=(1, 1))
                )
                (act_l): ReLU(inplace=True)
                (act_g): ReLU(inplace=True)
              )
            )
            (concat_layer): ConcatTupleLayer()
          )
        )
      )
      (conv0): SynthesisLayer(
        (affine): FullyConnectedLayer()
      )
      (conv1): SynthesisLayer(
        (affine): FullyConnectedLayer()
      )
      (torgb): ToRGBLayer(
        (affine): FullyConnectedLayer()
      )
    )
    (b256): SynthesisBlock(
      (ffc_skip): ModuleList(
        (0): FFCSkipLayer(
          (ffc_act): FFCBlock(
            (ffc_block): FFCResnetBlock(
              (conv1): FFC_BN_ACT(
                (ffc): FFC(
                  (convl2l): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convl2g): Conv2d(16, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convg2l): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convg2g): SpectralTransform(
                    (downsample): Identity()
                    (conv1): Sequential(
                      (0): Conv2d(48, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (1): ReLU(inplace=True)
                    )
                    (fu): FourierUnit(
                      (conv_layer): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (relu): ReLU()
                    )
                    (lfu): FourierUnit(
                      (conv_layer): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (relu): ReLU()
                    )
                    (conv2): Conv2d(24, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (gate): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))
                )
                (act_l): ReLU(inplace=True)
                (act_g): ReLU(inplace=True)
              )
              (conv2): FFC_BN_ACT(
                (ffc): FFC(
                  (convl2l): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convl2g): Conv2d(16, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convg2l): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
                  (convg2g): SpectralTransform(
                    (downsample): Identity()
                    (conv1): Sequential(
                      (0): Conv2d(48, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (1): ReLU(inplace=True)
                    )
                    (fu): FourierUnit(
                      (conv_layer): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (relu): ReLU()
                    )
                    (lfu): FourierUnit(
                      (conv_layer): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
                      (relu): ReLU()
                    )
                    (conv2): Conv2d(24, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (gate): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))
                )
                (act_l): ReLU(inplace=True)
                (act_g): ReLU(inplace=True)
              )
            )
            (concat_layer): ConcatTupleLayer()
          )
        )
      )
      (conv0): SynthesisLayer(
        (affine): FullyConnectedLayer()
      )
      (conv1): SynthesisLayer(
        (affine): FullyConnectedLayer()
      )
      (torgb): ToRGBLayer(
        (affine): FullyConnectedLayer()
      )
    )
  )
  (mapping): MappingNetwork(
    (fc0): FullyConnectedLayer()
    (fc1): FullyConnectedLayer()
  )
)



augment_pipe +++++++++++++++++++++++++
None



Setting up training phases...
Loading weights for net_encoder
Exporting sample images...
Setting up PyTorch plugin "bias_act_plugin"... Failed!
Setting up PyTorch plugin "upfirdn2d_plugin"... Failed!
Setting up PyTorch plugin "upfirdn2d_plugin"... Done.

进程已结束，退出代码为 137 (interrupted by signal 9:SIGKILL)
